<?php
class Domen extends CActiveRecord
{
    var $reg_domain = 0;
	var $region_search;
    public static function model($className=__CLASS__)
    {
    	return parent::model($className);
    }
    
    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
	return 'domen';
    }
    
    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
	// NOTE: you should only define rules for those attributes that
	// will receive user inputs.
	return array(
		        array( 'region_search', 'safe', 'on'=>'search' ),
		        array('name, city, region', 'required'),
				//array('name, text', 'required'),
                //array('category', 'in', 'range'=>array(1,2,3)),
                //array('private', 'in', 'range'=>array(1,2,3)),
    	);
    }
    
    /**
     * 
     */
    public function relations()
    {
        return array(
			'regionx'=>array(self::BELONGS_TO, 'Region', 'region'),
            //'creator_info'=>array(self::BELONGS_TO, 'User', 'creator_id'),
        );
    }

	public function getCitiesForDropdown()
	{
		$condition = '';
		$oderBy = 'city';
		$cities = $this->findAllbyAttributes(array('main'=>1), array('order'=>'num DESC, city ASC'));
		$return = array('not'=>'Выбрать');
		if(count($cities)) foreach($cities as $city) $return[$city->id] = '--> '.$city->city;
		return $return;
	}

	public function getCityByRegion($region_id=NULL)
	{
		$cond['with'] =
					array(
					'regionx'=>array(
					// записи нам не нужны
					'select'=>array('reg_domain'),
					// но нужно выбрать только пользователей с опубликованными записями
					'joinType'=>'INNER JOIN',
					//'condition'=>'t.region=regions.id',
					));
		$cond['order'] = 'num DESC, city ASC';
		$cities = $this->findAllbyAttributes(array('region'=>$region_id), $cond);
		//print_r($cities);
		//foreach($cities as $c){
			//print_r($c);
			//echo// $c->name;
			//echo $c->city;
			//$z = $c->regionx->reg_domain;
			//echo $z;
			//print_r($c->regionx);
			//echo $c->region->reg_domain;
			//exit("");
		 //echo "<br>".$c->name."-".$c->domen;
		//}
		//exit("");
		
		return $cities;
	}

	public function getArrayOfCities()
	{
		$q = $this->findAllByAttributes(array(), array('order'=>'id'));
		$city_array = array();
		foreach($q as $item)
		{
			$city_array[$item->id] = $item->city;
		}
		return $city_array;
	}
	
	public function getCurrentRegion(){
		$res = "Выбрать регион";
		return "<a href='javascript:void(0)'>".$res."</a>";
	}
	
    static function getGeoNameById($city_id,$raw=false){
			
		$city = Domen::model()->findByAttributes(array('id'=>$city_id));
		$region = Region::model()->findByAttributes(array('id'=>$city->region));
		
		if($raw!==false)
			return $region->name.", $city->city";
		return "$region->name, <span class='cityname'>$city->city</span>";
		/*if(isset($_SESSION['geo_city']))
			return $_SESSION['geo_city']->city;
		elseif(isset($_SESSION['geo_region']))
			return $_SESSION['geo_region']->name;
		else	
			return 'Выбрать регион';
		 
		 */
	}
	
	static function getRegionByCity($city_id){
			
		$city = Domen::model()->findByAttributes(array('id'=>$city_id));
		return $city->region;
		
	}

	public function getSubdomains($city_name){
		$data = Domen::model()->findByAttributes(array('city'=>$city_name));
		$res = array(
			'city_domain'=> $data->name,
			'region_domain'=>$data->region_name
		);
		return $res;
	}
	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'id' => 'ID',
			'name' => 'Cубдомен',
			'city' => 'Город',
			'regionx.name' => 'Регион',
            'city_in' => 'City In',
			'region' => 'Region',
            'region_name' => 'Region Name',
			'main' => 'Main',
			'num' => 'Num',
			'geo_city' => 'Geo City',
			'cap' => 'Cap',
			'timezone' => 'Timezone',
		);
	}
	
	

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.
	 */
	public function search()
	{
		// Warning: Please modify the following code to remove attributes that
		// should not be searched.

		$criteria=new CDbCriteria;
		$criteria->with = array("regionx"=>array("select"=>"region.name"));

		$criteria->compare('id',$this->id);
		$criteria->compare('name',$this->name,true);
		$criteria->compare('city',$this->city,true);
        $criteria->compare('city_in',$this->city_in,true);
		$criteria->compare('region',$this->region);
        $criteria->compare('region_name',$this->region_name);
		$criteria->compare('main',$this->main);
		$criteria->compare('num',$this->num);
		$criteria->compare('geo_city',$this->geo_city,true);
		$criteria->compare('cap',$this->cap);
		$criteria->compare('timezone',$this->timezone,true);
        $criteria->compare('regionx.name',$this->region_search,true);

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
			'pagination'=>array(
                        'pageSize'=>100,
            ),
			'sort'=>array(
				'defaultOrder'=>'t.id DESC',
			),
		));
	}
}
