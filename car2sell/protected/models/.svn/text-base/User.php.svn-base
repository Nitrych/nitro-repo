<?php
class User extends CActiveRecord
{
	var $city;
	var $region;
	//var $rules;
	const ACTIVATION_SUCCESS = 1, ACTIVATION_ERROR = 2;

    public static function model($className=__CLASS__)
    {
    	return parent::model($className);
    }
    
    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
        return 'user';
    }
    
    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            //array('password, email', 'required'),
            array('email', 'email'),
            array('email', 'unique', 'className'=>'User', 'caseSensitive'=>FALSE, 'attributeName'=>'email', 'message'=>'Данный електронный адресс уже используется'),
            array('username', 'unique', 'className'=>'User', 'caseSensitive'=>TRUE, 'attributeName'=>'username', 'message'=>'Данный псевдоним уже используется'),
			
			array('roles,icq, phone_number, skype, username, city', 'length', 'min'=>'2', 'tooShort'=>'Не менее двух сиволов'),
			array('password', 'length', 'min'=>'6', 'tooShort'=>'Длина пароля не менее 6 символов'),
            // email is email
			array('email', 'email','message'=>'Неверный формат електронного адреса'),
			array('is_active', 'safe'),
            //array('username, password, email', 'length', 'max'=>128),
            //array('domen', 'exist', 'allowEmpty'=>TRUE, 'attributeName' => 'id', 'className' => 'Domen'),
        );
    }
    
	/* public function search()
    {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            //array('password, email', 'required'),
            array('email', 'email'),
            array('email', 'unique', 'className'=>'User', 'caseSensitive'=>FALSE, 'attributeName'=>'email', 'message'=>'Данный електронный адресс уже используется'),
            array('username', 'unique', 'className'=>'User', 'caseSensitive'=>TRUE, 'attributeName'=>'username', 'message'=>'Данный псевдоним уже используется'),
            //array('username, password, email', 'length', 'max'=>128),
            array('domen', 'exist', 'allowEmpty'=>TRUE, 'attributeName' => 'id', 'className' => 'Domen'),
        );
    }
    */
    /**
     * 
     */
    public function relations()
    {
        return array(
            //'users_info'=>array(self::HAS_ONE, 'Users_Info', 'user_id'),
        );
    }
    
    /**
     * @return session key
     */
    public function updateSessionKey()
    {
		$sessionKey = md5(uniqid('',true));
		$this->session_key = $sessionKey;
		$this->save();
        return $this->session_key;
    }
    
    /**
     * @return confirm key
     */
    private function generateConfirmKey()
    {
        return $this->confirm_key = md5(uniqid('',true)).md5(uniqid('',true));
    }
    
    /**
     * @save new user in database
     */
	function genPassword($length){ 

    srand((double)microtime()*1000000); 
     
    $vowels = array("a", "e", "i", "o", "u"); 
    $cons = array("b", "c", "d", "g", "h", "j", "k", "l", "m", "n", "p", "r", "s", "t", "u", "v", "w", "tr", 
    "cr", "br", "fr", "th", "dr", "ch", "ph", "wr", "st", "sp", "sw", "pr", "sl", "cl"); 
     
    $num_vowels = count($vowels); 
    $num_cons = count($cons); 
     
    for($i = 0; $i < $length; $i++){ 
        $password .= $cons[rand(0, $num_cons - 1)] . $vowels[rand(0, $num_vowels - 1)]; 
    } 
     
    return substr($password, 0, $length); 
    }  
	
	public function sendNewPassword($user_email){
		
		
		$user = $this->findAllByAttributes(array('email'=>$user_email));
	
		
		if(count($user)==0)
			return false;
		
		
		$password = $this->genPassword(7);
		$encoded_password  = md5( md5(substr($password,0,3)).substr($password,3));
		$command = Yii::app()->db->createCommand();
		$command->update('user', array(
				'password'=>$encoded_password,
			), 'email=:email', array(':email' => $user_email));
		
		//echo $encoded_password;
		//exit("email $email");
		$email = Yii::app()->email;
        $email->to = $user_email;
        $email->subject = 'Новый пароль';
        $email->from = Config::model()->params['adminEmail'];
        $email->view = 'forgot';
        $email->viewVars = array('new_password'=>$password, 'baseUrl'=>Helper::getBU() );
        $email->send();
		return true;
	}
			
    public function saveNewUser($password, $email)
    {
        $this->password = md5( md5(substr($password,0,3)).substr($password,3));
        $this->email = $email;
        if (count($this->findAllByAttributes(array('email'=>$this->email,)))>0)
        {
            return 'user_exist';
        }
        $this->created_date = time();
        $this->is_active = 0;
		$this->domen = NULL;
        $this->generateConfirmKey();
        if($this->save())
        {
            $this->sendConfirmLetter($this->email);
			return TRUE;
        }
		else
		{
			return FALSE;
		}
    }

    
    /**
     * @send registration letter to comfirm account
     */
    private function sendConfirmLetter($email_to)
    {
        $email = Yii::app()->email;
        $email->to = $email_to;
        $email->subject = 'Activate your account';
        $email->from = Config::model()->params['adminEmail'];
        $email->view = 'confirm';
        $email->viewVars = array('confirm_key'=>$this->confirm_key, 'id'=>$this->id, 'baseUrl'=>Helper::getBU(), );
        $email->send();
    }
    
    /**
     * @comfirm account
     */
    public function activate($params=NULL)
    {
        if ($params != NULL)
        {
            if (count($this->findAllByAttributes(array('id'=>$params['id'],'is_active'=>1)))>0)
            {
                return self::ACTIVATION_ERROR;
            }
            $user = $this->findByPk($params['id']);
            if ($user->confirm_key == $params['key'])
            {
                $user->is_active = 1;
                $user->save(false,array('is_active'));
                return self::ACTIVATION_SUCCESS;
            }
            else 
            {
                return self::ACTIVATION_ERROR;
            }
        }
    }

    public function saveSettings(SettingsForm $form)
    {
        if($this->domen==0)
        {
            $this->domen = NULL;
        }       
        if($form->city!='not')
        {
            $this->domen = (int)$form->city;
        }
		$attr_array = array('skype', 'icq',	'phone_number', 'username', 'email',);
		foreach($form->attributes as $k => $value)
		{
			if(!in_array($k, $attr_array) || $k==NULL || $k=='')
            {
                continue;
            }
			$this->$k = $form->$k;
		}
        if($form->password!='' && $form->password!=NULL && $form->password==$form->re_password)
        {
            $this->password = md5( md5(substr($form->password,0,3)).substr($form->password,3));
        }
        if ($this->save())
        {
            return $this->id;
        }
        else
        {
            return FALSE;
        }
    }

	

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.
	 */
	public function search()
	{
		// Warning: Please modify the following code to remove attributes that
		// should not be searched.

		$criteria=new CDbCriteria;

		$criteria->compare('id',$this->id);
		$criteria->compare('username',$this->username,true);
		$criteria->compare('email',$this->email,true);
		$criteria->compare('password',$this->password,true);
		$criteria->compare('session_key',$this->session_key,true);
		$criteria->compare('confirm_key',$this->confirm_key,true);
		$criteria->compare('created_date',$this->created_date);
		$criteria->compare('is_active',$this->is_active);
		$criteria->compare('phone_number',$this->phone_number,true);
		$criteria->compare('skype',$this->skype,true);
		$criteria->compare('icq',$this->icq,true);
		$criteria->compare('domen',$this->domen);

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
			'pagination'=>array(
                        'pageSize'=>100,
            ),
			'sort'=>array(
				'defaultOrder'=>'id DESC',
			),
		));
	}
	
	static public function increaseAdsCounter($user_id){
		
		if($user_id==0)
			return false;
		
		$command = Yii::app()->db->createCommand();
		$command->update('user', array(
								'ads_count'=>new CDbExpression( 'ads_count + :ads_count' , array(':ads_count'=>1))
								)
								, 'id=:id', array(':id'=>$user_id));
		return true;
	}

	static public function decreaseAdsCounter($user_id){
		
		if($user_id==0)
			return false;
		
		$command = Yii::app()->db->createCommand();
		$command->update('user', array(
								'name'=>new CDbExpression( 'ads_count - :ads_count' , array(':ads_count'=>1))
								)
								, 'id=:id', array(':id'=>$user_id));
		return true;
	}
	
	/**
	 * Declares customized attribute labels.
	 * If not declared here, an attribute would have a label that is
	 * the same as its name with the first letter in upper case.
	 */
	public function attributeLabels()
	{
		return array(
			'username' => 'Имя',
			'email' => 'Email-адрес',
			'password' => 'Новый пароль',
			're_password'=> 'Повторите пароль',
            'phone_number'=>'Номер телефона',
            'icq'=>'ICQ',
            'skype'=>'Skype',
            'region'=>'Регион',
			'city'=>'Город',
			'is_active'=>'Активирован',
			'rules'=>'Права',
		);
	}
	
	static function saveSecretKey($email){
		$key = md5(rand(1,999000)."$email");
	
		$sql  = "select * from `keys` where email='".addslashes($email)."'";
		$command = Yii::app()->db->createCommand($sql);
		$row=$command->queryRow();
		if($row===false || $row['key']==''){
			 $command->insert('keys', array(
					'email' => $email,
					'key' => $key,
					
				));
		}
	}
	static function getSecretKey($email){
		$sql = "select * from `keys` where email='".addslashes($email)."'";
		$command = Yii::app()->db->createCommand($sql);
		$row = $command->queryRow();
	    return $row['key'];
	}
	static function isSecretAllowed($post_id){
		
		$post = Post::model()->findByPk($post_id);
		
		
		//print_r($post);
		//exit("wtf");
		if(!is_object($post))
			return false;
		//check if logged
		//print_r(Yii::app()->user);
		//exit("");
		//echo Yii::app()->user->id;
		if(isset(Yii::app()->user->roles) && Yii::app()->user->roles=='admin')
		    return true;
		
		if($post->creator_id==Yii::app()->user->id){
			
			return true;
		}
		
		if(!isset($_SESSION['nfc_secret']))
			return false;
		$sql = "select * from `keys` where email='".addslashes($post->email)."'";
		$command = Yii::app()->db->createCommand($sql);
		$row = $command->queryRow();
	    if($row['key']==$_SESSION['nfc_secret'])
			return true;
		return false;
	}
	// class User
	public function getFullName() {
		return $this->email;
	}
	public function getSuggest($q) {
		$c = new CDbCriteria();
		$c->addSearchCondition('username', $q, true, 'OR');
		$c->addSearchCondition('email', $q, true, 'OR');
		return $this->findAll($c);
	}
}
