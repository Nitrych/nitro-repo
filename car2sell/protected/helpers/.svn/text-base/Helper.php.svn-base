<?php
class Helper
{
	static public function numberToString($number=NULL)
	{
		if($number==NULL) return 'Вы не передали число для форматирования';
		$str = (string)$number;
		$return = array();
		for($j=1,$i=strlen($str); $i>0; $i--,$j++)
		{
			if($j%3==0) $return[($i-1)] = ' '.$str[($i-1)];
			else $return[($i-1)] = $str[($i-1)];
		}
		ksort($return);
		return implode('', $return);
	}

	static public function getFuelLink($name=NULL)
	{
		if(!in_array($name, array('gas', 'diesel', 'other'))) return 'Название топлива не соотвествует норме';
		switch($name)
		{
			case 'gas':
					return '<a title="Бензин" href="/?q[fuel]=gas">Бензин</a>';
					break;
			case 'diesel':
					return '<a title="Дизель" href="/?q[fuel]=diesel">Дизель</a>';
					break;
			case 'other':
					return '<a title="Другой" href="/?q[fuel]=other">Другой</a>';
					break;
		}
	}

	static public function getGearLink($name=NULL)
	{
		if(!in_array($name, array('auto', 'manual', 'other'))) return 'Название КПП не соотвествует норме';
		switch($name)
		{
			case 'auto':
					return '<a title="Автоматичексая" href="/?q[gear]=auto">Автоматическая</a>';
					break;
			case 'manual':
					return '<a title="Ручная" href="/?q[gear]=manual">Ручная</a>';
					break;
			case 'other':
					return '<a title="Другая" href="/?q[gear]=other">Другая</a>';
					break;
		}
	}

	static public function getRusMonth($month=NULL,$changed=false)
	{
		if($month==NULL) return 'Вы не ввели номер месяца';
		$monthes = array(
						1=>	'январь',
						2=>'февраль',
						3=>'март',
						4=>'апрель',
						5=>'май',
						6=>'июнь',
						7=>'июль',
						8=>'август',
						9=>'сентябрь',
						10=>'октябрь',
						11=>'ноябрь',
						12=>'декабрь',
					);
		$monthes_ch = array(
						1=>	'января',
						2=>'февраля',
						3=>'марта',
						4=>'апреля',
						5=>'мая',
						6=>'июня',
						7=>'июля',
						8=>'августа',
						9=>'сентября',
						10=>'октября',
						11=>'ноября',
						12=>'декабря',
					);
		if($changed!==false)
			return $monthes_ch[(int)$month];
		return $monthes[(int)$month];
	}

	static public function timeToString($time=NULL)
	{
		if($time==NULL) $time=time();
		return date('H:i', $time).', '.date('d').' '.self::getRusMonth(date('m', $time)).' '.date('Y', $time);
	}
	
	static public function dateToString($time=NULL)
	{
		if($time==NULL) $time=time();
		return date('d').' '.self::getRusMonth(date('m', $time),'changed');
	}
    
	/* 
	    getLinkClass("view=","default") for nonpapameterized link
	    getLinkClass("view=gallery")    for parameterized link
	 */
	static public function getLinkClass($pattern,$default=false){
		if($default!==false && strpos($_SERVER['REQUEST_URI'],$pattern)===false)
				return "active";
		if($default===false && strpos($_SERVER['REQUEST_URI'],$pattern)!==false)
			return  "active";
	}
	
	
	static function yiiparam($name, $default = null)
	{
		if ( isset(Yii::app()->params[$name]) )
			return Yii::app()->params[$name];
		else
			return $default;
	}
	
	static function getBU(){
		return "http://".substr( Yii::app()->params['baseServerName'], 1);	
		
	}
	
	static function addUrlParameter($name,$value){
		$res = Helper::getBU().$_SERVER['REQUEST_URI'];
		$name = urlencode($name);
		if(strpos($res,"$name"."=")!==false){
			$pos1 = strpos($res,"$name"."=")-1;
			$pos2 = strpos($res,"&",$pos1+1);
			$del_part = ($pos2===false) ?  substr($res,$pos1):substr($res,$pos1,$pos2-$pos1);
			$res = str_replace($del_part,'',$res);	
		}	
		
		if($value!=''){
			if(strpos($res,'?')!==false)
					$res .= '&';
			else
					$res .= '?';


			$res .= "$name=$value";
		}
		
		//$res = str_replace('//','/',$res);
		return $res;
	}
	static function SiteMessage($message,$hint,$error=false){
		
		$status_classname = ($error!==false)? "error":"success";
		
		//$hint = CHtml::encode($hint);
		$message = CHtml::encode($message);
		
		//$res = "
		//<p>&nbsp;</p>
		//<p>&nbsp;</p>
		//<div class='smessage $status_classname'>
		//$message
		//<div class='shint'>$hint</div>
		//</div>";
		
		$res = "
		<p>&nbsp;</p>
		<p>&nbsp;</p>
		<div class=\"activate_success $status_classname\">
        <center><h1 class=\"bold fs_lh_14_18 color_62\">$message</h1></center>
        <p class=\"message_text\">
            $hint
            </p>
        </div>";
		
		return $res;
	}
	static function SiteNote(){
		return Helper::SiteNotify(NFC::getMessage(),NFC::getError());
	}
	static function SiteNotify($message,$error=false){
		
		if($message=='' || $message==false){
			return "";
		}
		
		$status_classname = ($error!==false)? "error":"success";
		
		$message = CHtml::encode($message);
		
		$color = ($error)? 'color:red':'color:green';
		
		$res = "
		<center>
		<h3 style='$color; padding-top:5px' >
		$message
		</h3>
		</center>
		";
		
		return $res;
	}
		

		
    public static function getTitle($type=NULL, $params=NULL)
    {
        if($type!=NULL)
        {
            switch($type)
            {
                case 'main':
                    $region = DomenFilter::getCurrentGeoNameIn();
                    return 'Авто в '.$region.': продажа б/у автомобилей, купить подержанную машину с пробегом - объявления '.Yii::app()->name;
                    break;
                case 'category':
                    $region = (DomenFilter::getCurrentGeoName() == 'Выбрать регион') ? 'Россия' : DomenFilter::getCurrentGeoName();
                    $region_in = DomenFilter::getCurrentGeoNameIn();
                    return $params['category_name'].' в '.$region_in.' - доска бесплатных объявлений '.Yii::app()->name.' '.$region;
                    break;
                case 'one_post':
                    $region_in = DomenFilter::getCurrentGeoNameIn();
                    return $params['post_title'].' - Легковые автомобили в '.$region_in.' на '.Yii::app()->name;
                    break;
                case 'my_page':
                    return 'Мои объявления • '.Yii::app()->name;
                    break;
                case 'add_post':
                    $region = (DomenFilter::getCurrentGeoName() == 'Выбрать регион') ? 'Россия' : DomenFilter::getCurrentGeoName();
                    $region_in = DomenFilter::getCurrentGeoNameIn();
                    return 'Подать объявление бесплатно на сайте '.Yii::app()->name.' '.$region.' - разместить объявление в '.$region_in.' без регистрации';
                    break;
                default:
                    return 'Авто: продажа б/у автомобилей, купить подержанную машину с пробегом - объявления '.Yii::app()->name;;
                    break;
            }
        }
    }

    static public function getEmailLink($id=NULL)
    {
        $email = array(
                    0 => NULL,
                    1 => 'http://mail.google.com/',
                    2 => 'http://mail.ru/',
                    3 => 'http://mail.yandex.ru/',
                    4 => 'http://mail.rambler.ru/',
                    5 => 'http://freemail.ukr.net/',
                    6 => 'http://www.hotmail.com/',
        );
        if($id!=NULL)
        {
            if(isset($email[$id]))
            {
                return $email[$id];
            }
            else
            {
                return NULL;
            }
        }
    }

    static public function getEmailId($email=NULL)
    {
        $email_array = array(
                            1 => 'gmail.com',
                            2 => 'mail.ru',
                            3 => 'yandex.ru',
                            4 => 'rambler.ru',
                            5 => 'ukr.net',
                            6 => 'hotmail.com',
        );
        if($email!=NULL)
        {
            foreach($email_array as $k => $v)
            {
                if(strpos($email, $v)!==FALSE)
                {
                    return $k;
                }
            }
        }

        return 0;
    }
    
	static public function getAuthorFilter(){
		
		//$user_id = (isset($_GET['Post']['creator_id'])) ? intval($_GET['Post']['creator_id']) : 0;
		if($_GET['Post']['email']=='')
			$res = "Все пользователи";
		else{
			
			//$user =	User::model()->findByPk($user_id);
			$res = $_GET['Post']['email']. "<a href='". Helper::addUrlParameter("Post[email]","") ."'> Все пользователи</a>";
			
		}
		
		return $res;
	}
	static function getSelectedAttr($name,$value){
		
		if(isset($_GET['q'][$name]) &&  $_GET['q'][$name]  == $value)
			return " selected='selected'";
			
	}
	
	static function getCheckedAttr($name,$value){
		
		if(isset($_GET['q'][$name]) &&  $_GET['q'][$name]  == $value)
			return " checked";
			
	}
	
	static function getUploadedPhotos($post_id){
		$fotos = PostFoto::model()->getAllForPost($post_id);
		 if(count($fotos)): 
				foreach($fotos as $key => $foto): 
					$res .=  "<p><img width=200 src='$foto->path' /><a href='".Helper::getBU()."/post/delphoto/$foto->id'>удалить</a></p><br />";
				endforeach; 
		 endif; 
		 return $res;
	}
	
	static function getCurrencySign($currency_code){
		if($currency_code==Post::CURRENCY_RUBL)
			return "руб.";
		if($currency_code==Post::CURRENCY_DOLLAR)
			return "$";
		if($currency_code==Post::CURRENCY_EURO)
			return "EUR";			
		
	}
	
	
	static function getThumb($url,$width,$height,$extra=false){
		
		//echo "$url :s";
		//return false;
		$url = ".".$url;
		
		$newFilename = "./images/thumbs/$width"."x$height".md5($url).".jpg";
		if(is_file($newFilename)){
			$url = str_replace("./","/",$newFilename);
			return $url;
		}
		
		$image = Yii::app()->image->load($url);
		
		if($extra=='width')
			$image->resize($width, $height, Image::WIDTH);  //->rotate(-45)->quality(75)->sharpen(20);
		else
			$image->resize($width, $height);  //->rotate(-45)->quality(75)->sharpen(20);
		
		$image->save($newFilename); // or $image->save('images/small.jpg');
		$url = str_replace("./","/",$newFilename);
		return $url;
	}
}
